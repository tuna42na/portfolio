{"version":3,"sources":["images/tunalogo.svg","images/bass.svg","images/code.svg","images/code_pen.svg","images/resume.svg","components/links.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Links","jobs","push","image","code","title","href","bass","code_pen","resume","items","map","job","i","id","key","className","src","alt","Container","tunalogo","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,6RCS9BC,EAAb,uKAGQ,IAAMC,EAAO,GACbA,EAAKC,KAAK,CAACC,MAAOC,IAAMC,MAAM,OAAQC,KAAK,gCAC3CL,EAAKC,KAAK,CAACC,MAAOI,IAAMF,MAAM,QAASC,KAAO,0CAC9CL,EAAKC,KAAK,CAACC,MAAOK,IAAUH,MAAM,UAAWC,KAAO,iCACpDL,EAAKC,KAAK,CAACC,MAAOM,IAAQJ,MAAM,SAAUC,KAAO,8CAEjD,IAAMI,EAAQT,EAAKU,KAAI,SAACC,EAAKC,GAAN,OAEf,yBAAKC,GAAIF,EAAIP,MAAOU,IAAKF,GACrB,uBAAGP,KAAMM,EAAIN,MACb,yBACIU,UAAU,UACVC,IAAG,UAAKL,EAAIT,OACZe,IAAG,UAAKN,EAAIP,cAOhC,OACI,kBAACc,EAAA,EAAD,KACI,yBAAKH,UAAU,4BACdN,EACD,yBAAKI,GAAG,WAAWG,IAAKG,YA3BpC,GAA2BC,IAAMC,W,MCYlBC,MAdf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKF,GAAG,iBAAiBG,IAAKG,MAC5B,kBAACD,EAAA,EAAD,KACI,kBAAC,EAAD,UCDQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.328d1b18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tunalogo.19a56cc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/bass.0d6fda91.svg\";","module.exports = __webpack_public_path__ + \"static/media/code.e9a0db64.svg\";","module.exports = __webpack_public_path__ + \"static/media/code_pen.7aa280dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/resume.370ca041.svg\";","import React from 'react';\nimport bass from '../images/bass.svg';\nimport code from '../images/code.svg';\nimport code_pen from '../images/code_pen.svg';\nimport resume from '../images/resume.svg';\nimport { Container, Row } from 'reactstrap';\nimport tunalogo from '../images/tunalogo.svg';\n\n\nexport class Links extends React.Component{\n    \n    render(){\n        const jobs = [];\n        jobs.push({image: code ,title:'Code', href:\"https://github.com/tuna42na\"});\n        jobs.push({image: bass ,title:'Music', href : \"https://www.familyandfriendsband.com/\"});\n        jobs.push({image: code_pen ,title:'Codepen', href : \"https://codepen.io/tuna42na/\"});\n        jobs.push({image: resume ,title:'Resume', href : \"https://www.linkedin.com/in/tuna-fortuna/\"});\n\n        const items = jobs.map((job, i) =>\n            \n                <div id={job.title} key={i}>\n                    <a href={job.href}>\n                    <img \n                        className=\"iconSvg\"\n                        src={`${job.image}`} \n                        alt={`${job.title}`} \n                    ></img>\n                    </a>\n                </div>\n            \n        );\n\n    return(\n        <Container>\n            <div className=\"outbound-links-container\">\n            {items}\n            <img id=\"tunalogo\" src={tunalogo}/>\n            </div>\n        </Container>\n    );\n    }\n}","import React from 'react';\nimport {Links} from './components/links';\nimport './App.css';\nimport { Container, Row } from 'reactstrap';\nimport tunalogo from './images/tunalogo.svg';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <img id=\"tunaheaderlogo\" src={tunalogo}/>\n        <Container>\n            <Links />\n        </Container>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}